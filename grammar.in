PROGRAM -> int main ( ) { STATEMENT_LANGUAGE }
STATEMENT_LANGUAGE -> STATEMENT STATEMENT_LANGUAGE
STATEMENT_LANGUAGE -> nil
STATEMENT -> DECLARATION_STATEMENT
STATEMENT -> IF_STATEMENT
STATEMENT -> DO_WHILE_STATEMENT

# done until here

STATEMENT -> ASSIGNMENT_STATEMENT
STATEMENT -> WHILE_STATEMENT
STATEMENT -> FOR_STATEMENT

TYPE -> float
TYPE -> int
TYPE -> char
TYPE -> double
TYPE -> bool

DECLARATION_STATEMENT -> @push TYPE @push identifier DECLARATION_STATEMENT3

DECLARATION_STATEMENT3 -> VARIABLE_DECLARATION
DECLARATION_STATEMENT3 -> [ ARRAY_DECLARATION2

VARIABLE_DECLARATION -> VARIABLE_DECLARATION2 DECLARATION_STATEMENT2

VARIABLE_DECLARATION2 -> = @c_desc_with_assign number
VARIABLE_DECLARATION2 -> @c_desc nil

ARRAY_DECLARATION2 -> @c_desc_normal_array number ] DECLARATION_STATEMENT2
ARRAY_DECLARATION2 -> @push ] = { @push number ARRAY_DECLARATION3

ARRAY_DECLARATION3 -> , @push number ARRAY_DECLARATION3
ARRAY_DECLARATION3 -> @c_desc_weird_array } ;

DECLARATION_STATEMENT2 -> , @push identifier DECLARATION_STATEMENT3
DECLARATION_STATEMENT2 -> @pop ;

MATH_EXPRESSION -> MATH_TERM MATH_EXPRESSION2

MATH_EXPRESSION2 -> + MATH_TERM MATH_EXPRESSION2
MATH_EXPRESSION2 -> - MATH_TERM MATH_EXPRESSION2
MATH_EXPRESSION2 -> nil

MATH_TERM -> MATH_FACTOR MATH_TERM2
MATH_TERM2 -> * MATH_FACTOR MATH_TERM2 
MATH_TERM2 -> / MATH_FACTOR MATH_TERM2 
MATH_TERM2 -> nil

MATH_FACTOR -> identifier OPTIONAL_ARRAY_INDEX
MATH_FACTOR -> ( MATH_EXPRESSION )
MATH_FACTOR -> number
MATH_FACTOR -> - MATH_FACTOR
OPTIONAL_ARRAY_INDEX -> [ MATH_EXPRESSION ]
OPTIONAL_ARRAY_INDEX -> nil

COMPARISON_OPERATOR -> ==
COMPARISON_OPERATOR -> !=
COMPARISON_OPERATOR -> <=
COMPARISON_OPERATOR -> >=
COMPARISON_OPERATOR -> <
COMPARISON_OPERATOR -> >

# BOOLEAN_EXPRESSION -> BOOLEAN_TERM BOOLEAN_EXPRESSION2
# BOOLEAN_EXPRESSION2 -> or BOOLEAN_TERM BOOLEAN_EXPRESSION2
# BOOLEAN_EXPRESSION2 -> nil

BOOLEAN_EXPRESSION -> @push identifier

BOOLEAN_TERM -> BOOLEAN_FACTOR BOOLEAN_TERM2
BOOLEAN_TERM2 -> and BOOLEAN_FACTOR BOOLEAN_TERM2
BOOLEAN_TERM2 -> nil

#BOOLEAN_FACTOR -> identifier
#BOOLEAN_FACTOR -> ( BOOLEAN_EXPRESSION )
BOOLEAN_FACTOR -> not BOOLEAN_FACTOR
BOOLEAN_FACTOR -> true
BOOLEAN_FACTOR -> false
BOOLEAN_FACTOR -> MATH_EXPRESSION BOOLEAN_FACTOR2
BOOLEAN_FACTOR2 -> COMPARISON_OPERATOR MATH_EXPRESSION
BOOLEAN_FACTOR2 -> nil

IF_STATEMENT -> if @push_start_of_if ( BOOLEAN_EXPRESSION @start_of_if  ) { STATEMENT_LANGUAGE @if_jump_out } ELSE_STATEMENT
ELSE_STATEMENT -> @end_of_all_if nil
ELSE_STATEMENT -> else ELSE_STATEMENT2
ELSE_STATEMENT2 -> if ( BOOLEAN_EXPRESSION @start_of_if ) { STATEMENT_LANGUAGE @if_jump_out } ELSE_STATEMENT
ELSE_STATEMENT2 -> { STATEMENT_LANGUAGE @end_of_all_if }

DO_WHILE_STATEMENT -> @start_of_loop do @push_pc {  LOOP_STATEMENT_LANGUAGE } while ( @push_continue_destination BOOLEAN_EXPRESSION @do_while_end ) @end_of_loop


WHILE_STATEMENT -> @start_of_loop while ( BOOLEAN_EXPRESSION ) { LOOP_STATEMENT_LANGUAGE } @end_of_loop
FOR_STATEMENT -> @start_of_loop for ( SIMPLE_ASSIGNMENT_STATEMENT ; BOOLEAN_EXPRESSION ; INCREMENT_DECREMENT_STATEMENT ) { LOOP_STATEMENT_LANGUAGE } @end_of_loop

SIMPLE_ASSIGNMENT_STATEMENT -> identifier = number
SIMPLE_ASSIGNMENT_STATEMENT -> TYPE identifier = number
INCREMENT_DECREMENT_STATEMENT -> PLUS_PLUS_OR_MINUS_MINUS identifier
INCREMENT_DECREMENT_STATEMENT -> identifier PLUS_PLUS_OR_MINUS_MINUS
PLUS_PLUS_OR_MINUS_MINUS -> ++
PLUS_PLUS_OR_MINUS_MINUS -> --

ASSIGNMENT_OPERATOR -> =
ASSIGNMENT_OPERATOR -> +=
ASSIGNMENT_OPERATOR -> -=
ASSIGNMENT_OPERATOR -> *=
ASSIGNMENT_OPERATOR -> /=

# ASSIGNMENT_STATEMENT -> identifier ASSIGNMENT_OPERATOR MATH_EXPRESSION ASSIGNMENT_STATEMENT2

ASSIGNMENT_STATEMENT -> @push identifier @push ASSIGNMENT_OPERATOR @complete_assignment ASSIGNMENT_STATEMENT3
ASSIGNMENT_STATEMENT3 -> number ;
ASSIGNMENT_STATEMENT3 -> identifier ;

ASSIGNMENT_STATEMENT2 -> ;
ASSIGNMENT_STATEMENT2 -> COMPARISON_OPERATOR MATH_EXPRESSION ;

LOOP_STATEMENT_LANGUAGE -> LOOP_STATEMENT LOOP_STATEMENT_LANGUAGE
LOOP_STATEMENT_LANGUAGE -> nil
LOOP_STATEMENT -> @push_break break ;
LOOP_STATEMENT -> @push_continue continue ;
LOOP_STATEMENT -> STATEMENT
