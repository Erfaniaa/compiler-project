PROGRAM -> int main ( ) { STATEMENT_LANGUAGE }
STATEMENT_LANGUAGE -> STATEMENT STATEMENT_LANGUAGE
STATEMENT_LANGUAGE -> nil
STATEMENT -> DECLARATION_STATEMENT
STATEMENT -> ASSIGNMENT_STATEMENT
STATEMENT -> IF_STATEMENT
STATEMENT -> WHILE_STATEMENT
STATEMENT -> DO_WHILE_STATEMENT
STATEMENT -> FOR_STATEMENT

TYPE -> float
TYPE -> int
TYPE -> char
TYPE -> double
TYPE -> bool

DECLARATION_STATEMENT -> TYPE DECLARATION_STATEMENT2 DECLARATION_STATEMENT3
DECLARATION_STATEMENT2 -> identifier ASSIGNMENT_IN_DECLARATION
ASSIGNMENT_IN_DECLARATION -> nil
ASSIGNMENT_IN_DECLARATION -> = number
DECLARATION_STATEMENT2 -> , DECLARATION_STATEMENT2 DECLARATION_STATEMENT3
DECLARATION_STATEMENT2 -> ;

MATH_EXPRESSION -> MATH_TERM MATH_EXPRESSION2
MATH_EXPRESSION2 -> + MATH_TERM MATH_EXPRESSION2
MATH_EXPRESSION2 -> nil

MATH_TERM -> MATH_FACTOR MATH_TERM2
MATH_TERM2 -> * MATH_FACTOR MATH_TERM2 
MATH_TERM2 -> / MATH_FACTOR MATH_TERM2 
MATH_TERM2 -> nil

MATH_FACTOR -> identifier OPTIONAL_ARRAY_INDEX
MATH_FACTOR -> ( MATH_EXPRESSION )
MATH_FACTOR -> number
#OPTIONAL_ARRAY_INDEX -> [ MATH_EXPRESSION ]
OPTIONAL_ARRAY_INDEX -> nil

BOOLEAN_EXPRESSION -> BOOLEAN_TERM BOOLEAN_EXPRESSION2
BOOLEAN_EXPRESSION2 -> or BOOLEAN_TERM BOOLEAN_EXPRESSION2
BOOLEAN_EXPRESSION2 -> nil

BOOLEAN_TERM -> BOOLEAN_FACTOR BOOLEAN_TERM2
BOOLEAN_TERM2 -> and BOOLEAN_FACTOR BOOLEAN_TERM2
BOOLEAN_TERM2 -> nil

#BOOLEAN_FACTOR -> identifier
#BOOLEAN_FACTOR -> ( BOOLEAN_EXPRESSION )
BOOLEAN_FACTOR -> MATH_EXPRESSION < MATH_EXPRESSION
#BOOLEAN_FACTOR -> MATH_EXPRESSION <= MATH_EXPRESSION
#BOOLEAN_FACTOR -> MATH_EXPRESSION > MATH_EXPRESSION
#BOOLEAN_FACTOR -> MATH_EXPRESSION >= MATH_EXPRESSION
#BOOLEAN_FACTOR -> MATH_EXPRESSION == MATH_EXPRESSION
#BOOLEAN_FACTOR -> MATH_EXPRESSION != MATH_EXPRESSION

IF_STATEMENT -> if ( BOOLEAN_EXPRESSION ) { STATEMENT_LANGUAGE } IF_STATEMENT2
IF_STATEMENT2 -> nil
IF_STATEMENT2 -> else { STATEMENT_LANGUAGE }

WHILE_STATEMENT -> while ( BOOLEAN_EXPRESSION ) { STATEMENT_LANGUAGE }
DO_WHILE_STATEMENT -> do { STATEMENT_LANGUAGE } while ( BOOLEAN_EXPRESSION )
FOR_STATEMENT -> for ( SIMPLE_ASSIGNMENT_STATEMENT ; BOOLEAN_EXPRESSION ; ICREAMENT_DECREAMENT_STATEMENT )

SIMPLE_ASSIGNMENT_STATEMENT -> identifier = number
ICREAMENT_DECREAMENT_STATEMENT -> identifier ++

ASSIGNMENT_STATEMENT -> identifier = MATH_EXPRESSION ASSIGNMENT_STATEMENT2
ASSIGNMENT_STATEMENT2 -> ;
#ASSIGNMENT_STATEMENT2 -> < MATH_EXPRESSION ;
#ASSIGNMENT_STATEMENT2 -> > MATH_EXPRESSION ;
#ASSIGNMENT_STATEMENT2 -> == MATH_EXPRESSION ;
#ASSIGNMENT_STATEMENT2 -> != MATH_EXPRESSION ;
#ASSIGNMENT_STATEMENT2 -> >= MATH_EXPRESSION ;
#ASSIGNMENT_STATEMENT2 -> <= MATH_EXPRESSION ;